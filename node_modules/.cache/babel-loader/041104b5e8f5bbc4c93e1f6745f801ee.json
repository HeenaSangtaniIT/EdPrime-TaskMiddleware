{"ast":null,"code":"// import {applyMiddleware, compose, createStore} from \"redux\";\n// import { persistStore, persistReducer } from \"redux-persist\";\n// import createSagaMiddleware from \"redux-saga\";\n// import storage from \"redux-persist/lib/storage\";\n// import cardSagas from \"./card/card.saga\";\n// import reducers from \"./redux/reducers\";\n// const persistentKey = {\n//     key: \"techtask\",\n//     storage,\n// }\n// const persistentReducer = persistReducer(persistentKey,reducers)\n// const sagaMiddleware = createSagaMiddleware();\n// const middlewares = [sagaMiddleware]\n// export function configureStore(initialState){\n//     const storeConfiguration = createStore(persistentReducer,initialState,compose(applyMiddleware(...middlewares)))\n//     let persistentStore = persistStore(storeConfiguration);\n//     sagaMiddleware.run(cardSagas);\n//     return{storeConfiguration, persistentStore};\n// }\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport createSagaMiddleware from \"redux-saga\";\nimport storage from \"redux-persist/lib/storage\";\nimport cardSagas from \"./card/card.saga\";\nimport reducers from \"./redux/reducers\";\nimport { loadState, saveState } from './common/localStorage';\nimport { loggerMiddleware } from './redux/middleware/loggerMiddleware';\nimport _ from \"lodash\";\n\nconst configureStore = () => {\n  const sagaMiddleware = createSageMiddleware();\n  const persistStore = loadState();\n  const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  const store = createStore(rootReducer, persistStore, composeEnhancer(applyMiddleware(sagaMiddleware, loggerMiddleware)));\n  sagaMiddleware.run(cardSagas);\n  store.subscribe(_.throttle(() => {\n    saveState(store.getState());\n  }, 1000));\n  return store;\n};\n\nexport default configureStore;","map":{"version":3,"sources":["/Users/banshi/Documents/techTask/techtask/src/configureStore.js"],"names":["applyMiddleware","compose","createStore","persistStore","persistReducer","createSagaMiddleware","storage","cardSagas","reducers","loadState","saveState","loggerMiddleware","_","configureStore","sagaMiddleware","createSageMiddleware","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","rootReducer","run","subscribe","throttle","getState"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,eAAR,EAAyBC,OAAzB,EAAkCC,WAAlC,QAAoD,OAApD;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AAEA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,uBAArC;AACA,SAASC,gBAAT,QAAiC,qCAAjC;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEA,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAMC,cAAc,GAAGC,oBAAoB,EAA3C;AACA,QAAMZ,YAAY,GAAGM,SAAS,EAA9B;AACA,QAAMO,eAAe,GAAGC,MAAM,CAACC,oCAAP,IAA+CjB,OAAvE;AACA,QAAMkB,KAAK,GAAGjB,WAAW,CAACkB,WAAD,EAAcjB,YAAd,EAA4Ba,eAAe,CAAChB,eAAe,CAACc,cAAD,EAAiBH,gBAAjB,CAAhB,CAA3C,CAAzB;AAEAG,EAAAA,cAAc,CAACO,GAAf,CAAmBd,SAAnB;AAEAY,EAAAA,KAAK,CAACG,SAAN,CAAgBV,CAAC,CAACW,QAAF,CAAW,MAAM;AAC7Bb,IAAAA,SAAS,CAACS,KAAK,CAACK,QAAN,EAAD,CAAT;AACH,GAFe,EAEb,IAFa,CAAhB;AAIA,SAAOL,KAAP;AAEH,CAdD;;AAeA,eAAeN,cAAf","sourcesContent":["// import {applyMiddleware, compose, createStore} from \"redux\";\n// import { persistStore, persistReducer } from \"redux-persist\";\n// import createSagaMiddleware from \"redux-saga\";\n// import storage from \"redux-persist/lib/storage\";\n// import cardSagas from \"./card/card.saga\";\n// import reducers from \"./redux/reducers\";\n\n// const persistentKey = {\n//     key: \"techtask\",\n//     storage,\n// }\n\n// const persistentReducer = persistReducer(persistentKey,reducers)\n// const sagaMiddleware = createSagaMiddleware();\n// const middlewares = [sagaMiddleware]\n// export function configureStore(initialState){\n//     const storeConfiguration = createStore(persistentReducer,initialState,compose(applyMiddleware(...middlewares)))\n//     let persistentStore = persistStore(storeConfiguration);\n//     sagaMiddleware.run(cardSagas);\n//     return{storeConfiguration, persistentStore};\n// }\n\nimport {applyMiddleware, compose, createStore} from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport createSagaMiddleware from \"redux-saga\";\nimport storage from \"redux-persist/lib/storage\";\nimport cardSagas from \"./card/card.saga\";\nimport reducers from \"./redux/reducers\";\n\nimport { loadState, saveState } from './common/localStorage';\nimport { loggerMiddleware } from './redux/middleware/loggerMiddleware';\nimport _ from \"lodash\";\n\nconst configureStore = () => {\n    const sagaMiddleware = createSageMiddleware();\n    const persistStore = loadState();\n    const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    const store = createStore(rootReducer, persistStore, composeEnhancer(applyMiddleware(sagaMiddleware, loggerMiddleware)))\n\n    sagaMiddleware.run(cardSagas);\n\n    store.subscribe(_.throttle(() => {\n        saveState(store.getState());\n    }, 1000))\n\n    return store;\n\n}\nexport default configureStore;"]},"metadata":{},"sourceType":"module"}